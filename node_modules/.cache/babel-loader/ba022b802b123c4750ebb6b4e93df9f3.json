{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _resultStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserData() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._resultStatus);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._resultStatus);\n  }\n\n  setUserData(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._resultStatus);\n  }\n\n  setUserAvatar(_ref3) {\n    let {\n      avatar\n    } = _ref3;\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._resultStatus);\n  }\n\n  addNewCard(_ref4) {\n    let {\n      name,\n      link\n    } = _ref4;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._resultStatus);\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._resultStatus);\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._resultStatus);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._resultStatus);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-29\",\n  headers: {\n    \"authorization\": \"68b487ea-9941-4a24-8c2a-4ecc7bd99a0c\",\n    \"content-type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/aleksandradubrovskaa/Desktop/mesto-react/mesto-react/src/utils/api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_resultStatus","res","ok","json","Promise","reject","status","getUserData","fetch","then","getInitialCards","setUserData","name","about","method","body","JSON","stringify","setUserAvatar","avatar","addNewCard","link","setLike","cardId","deleteLike","deleteCard","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _resultStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserData() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    })\n    .then(this._resultStatus);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    })\n    .then(this._resultStatus);\n  }\n\n  setUserData({name, about}) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    })\n    .then(this._resultStatus);\n  }\n\n  setUserAvatar({ avatar }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    })\n    .then(this._resultStatus);\n  }\n\n  addNewCard({ name, link }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    })\n    .then(this._resultStatus);\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    })\n    .then(this._resultStatus);\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n    .then(this._resultStatus);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n    .then(this._resultStatus);\n  }\n}\n\nconst api = new Api ({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-29\",\n  headers: {\n    \"authorization\": \"68b487ea-9941-4a24-8c2a-4ecc7bd99a0c\",\n    \"content-type\": \"application/json\"\n  }\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}